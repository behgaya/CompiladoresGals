import javax.swing.*;


import java.awt.event.*;
import java.io.*;
import java.awt.Color;
import java.awt.Container;
import java.awt.Image;


public class MainWindow extends javax.swing.JFrame {
    private String lastSavedFilePath; // Variável para armazenar o último caminho do arquivo salvo
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        sourceInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        buttonCompile = createButton("/icons/compile.png", 30, 30);;
        buttonSave = createButton("/icons/save.png", 30, 30);
        buttonOpen = createButton("/icons/openFile.png", 30, 30); 
        buttonSaveAs = createButton("/icons/saveAs.png", 30, 30);
        buttonDarkMode = createButton("/icons/dark.png", 30, 30);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IDE do Professor");
        
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveAsActionPerformed(evt);
            }
        });

        buttonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenActionPerformed(evt);
            }
        });

        buttonCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCompileActionPerformed(evt);
            }
        });

        buttonDarkMode.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                toggleDarkMode();
            }
        });

        sourceInput.setColumns(20);
        sourceInput.setFont(new java.awt.Font("Helvetica Neue", 0, 18));
        sourceInput.setRows(5);
        jScrollPane1.setViewportView(sourceInput);
    
        console.setEditable(false);
        console.setColumns(20);
        console.setFont(new java.awt.Font("Helvetica Neue", 0, 14));
        console.setLineWrap(true);
        console.setRows(5);
        console.setTabSize(4);
        jScrollPane2.setViewportView(console);
    
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSaveAs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCompile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDarkMode) // Adiciona o botão Modo Escuro
                .addContainerGap()
            )
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addContainerGap()
            )
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap()
            )
        );
        
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave)
                    .addComponent(buttonSaveAs)
                    .addComponent(buttonOpen)
                    .addComponent(buttonCompile)
                    .addComponent(buttonDarkMode)) // Adiciona o botão Modo Escuro
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap()
            )
        );
        pack();
    }

    private void buttonCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCompileActionPerformed
        Lexico lex = new Lexico();
        Sintatico sint = new Sintatico();
        Semantico sem = new Semantico();
        
        lex.setInput(sourceInput.getText());
        
        try {
            sint.parse(lex, sem);
            console.setText("Compilado com sucesso!");
        } catch (LexicalError | SyntaticError | SemanticError ex) {
            console.setText("Problema na compilação: "+ex.getLocalizedMessage());
        }

        
    }//GEN-LAST:event_buttonCompileActionPerformed


    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        if (lastSavedFilePath != null) { 
            console.setText("Arquivo foi salvo com sucesso!\n" + lastSavedFilePath);
            fileChooser.setCurrentDirectory(new File(lastSavedFilePath).getParentFile());
            File selectedFile = new File(lastSavedFilePath);
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile))) {
                writer.write(sourceInput.getText());
                lastSavedFilePath = selectedFile.getAbsolutePath(); 
                console.setText("Arquivo foi salvo com sucesso!\n" + lastSavedFilePath);
                setTitle(selectedFile.getName() + " - IDE do Professor");

            } catch (IOException e) {
                console.setText("Erro ao salvar o arquivo: " + e.getMessage());
            }

        } else {
            buttonSaveAsActionPerformed(evt);
        }
    }
    
    private void buttonSaveAsActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();
            
            if (!filePath.contains(".")) {
                selectedFile = new File(filePath + ".clz");
            } else if (!filePath.endsWith(".clz")) { 
                JOptionPane.showMessageDialog(null, "A extensão do arquivo deve ser .clz", "Erro de Extensão", JOptionPane.ERROR_MESSAGE);
                return; 
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile))) {
                writer.write(sourceInput.getText());
                lastSavedFilePath = selectedFile.getAbsolutePath(); 
                setTitle(selectedFile.getName() + " - IDE do Professor");
                console.setText("Arquivo salvo com sucesso!");
            } catch (IOException e) {
                console.setText("Erro ao salvar o arquivo: " + e.getMessage());
            }
        }
    }
    
    private void buttonOpenActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            
            if (!selectedFile.getName().endsWith(".clz")) {
                JOptionPane.showMessageDialog(null, "A extensão do arquivo deve ser .clz", "Erro de Extensão", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                StringBuilder content = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line).append("\n");
                }
                sourceInput.setText(content.toString());
                console.setText("Arquivo aberto com sucesso!");
                setTitle(selectedFile.getName() + " - IDE do Professor");
                lastSavedFilePath = selectedFile.getAbsolutePath(); 
    
            } catch (IOException e) {
                console.setText("Erro ao abrir o arquivo: " + e.getMessage());
            }
        }
    }
    
    

    private JButton createButton(String iconPath, int width, int height){
        JButton button = new JButton();

        java.net.URL imgUrl = getClass().getResource(iconPath);
        Icon icon = new ImageIcon(imgUrl);
        Image img = ((ImageIcon) icon).getImage();
        Image newImg = img.getScaledInstance(width, height, java.awt.Image.SCALE_SMOOTH);
        Icon newIcon = new ImageIcon(newImg);

        button.setIcon(newIcon);
        button.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // Configuração do botão Abrir

        return button;
    }

    
    private void setComponentColors(Container container, JButton[] buttons) {
        Color backgroundColor;
        Color foregroundColor;

        if (isDarkMode) {
            backgroundColor = Color.darkGray;
            foregroundColor = Color.white;
            
        } else {
            backgroundColor = null;
            foregroundColor = Color.black;
        }

        container.setBackground(backgroundColor);

        for (JButton button : buttons) {
            button.setBackground(backgroundColor);
            button.setForeground(foregroundColor);
        }

        sourceInput.setBackground(backgroundColor);
        sourceInput.setForeground(foregroundColor);

        console.setBackground(backgroundColor);
        console.setForeground(foregroundColor);
    }

    private void toggleDarkMode() {
        isDarkMode = !isDarkMode;
        setComponentColors(this.getContentPane(), new JButton[]{buttonSave, buttonSaveAs, buttonOpen, buttonCompile, buttonDarkMode});
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCompile;
    private javax.swing.JTextArea console;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea sourceInput;
    private JButton buttonSave;
    private JButton buttonOpen;
    private JButton buttonSaveAs;
    private JButton buttonDarkMode;
    private boolean isDarkMode = false; 
    // End of variables declaration//GEN-END:variables
}
